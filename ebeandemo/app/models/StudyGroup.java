package models;

import java.util.List;
import javax.persistence.Entity;
import javax.persistence.ManyToMany;
import javax.validation.constraints.NotNull;

/**
 * Demonstrate the following relationships in the Ebean ORM:
 * <pre>{@code
 * 0 - N TO 0 - M RELATIONSHIP
 *
 * Each study group has 0 - N students
 * Each student has 0 - M study groups
 *
 * +---------------------------------+       +---------------------------------+
 * |                                 |       |                                 |
 * | DormLounge                      |>O---O<| StudyGroup                      |
 * |                                 |       |                                 |
 * +---------------------------------+       +---------------------------------+
 * @ManyToMany                               @ManyToMany(mappedBy
 * public List<StudyGroup>                           = "studyGroups")
 *         studyGroups;                      public List<DormLounge>
 *                                                   dormLounges;
 * }</pre>
 * The presence of {@code mappedBy} marks this side of the <!--              -->
 * {@code @ManyToMany}/{@code @ManyToMany} relationship as the inverse
 * (non-owning) side; the other side is the owning side.
 * <p>
 * In order to support this relationship, no columns are added to the two
 * database tables that represent its Java classes; instead, an auxiliary join
 * table named {@code dorm_lounge_study_group} is added to the database, as
 * shown below.
 * <pre>{@code
 * 0 - N TO 0 - M RELATIONSHIP
 *
 * Each study group has 0 - N students
 * Each student has 0 - M study groups
 *
 * +---------------------------------+       +---------------------------------+
 * |                                 |       |                                 |
 * | StudyGroup                      |>O---O<| Student                         |
 * |                                 |       |                                 |
 * +---------------------------------+       +---------------------------------+
 * @ManyToMany                               @ManyToMany(mappedBy = "students")
 * public List<Student> students;            public List<StudyGroup>
 *                                                   studyGroups;
 * }</pre>
 * The presence of {@code mappedBy} marks this side of the <!--              -->
 * {@code @ManyToMany}/{@code @ManyToMany} relationship as the inverse
 * (non-owning) side; the other side is the owning side.
 * <p>
 * In order to support this relationship, no columns are added to the two
 * database tables that represent its Java classes; instead, an auxiliary join
 * table named {@code study_group_student} is added to the database, as shown
 * below.
 * <p>
 * Here are the MySQL database table and the auxiliary join table generated by
 * the Ebean ORM; the first column in the join table belongs to the owning side
 * of the relationship and the second column belongs to the inverse (non-owning)
 * side:
 * <pre>{@code
 * mysql> DESCRIBE study_group;
 * +-------+--------------+------+-----+---------+----------------+
 * | Field | Type         | Null | Key | Default | Extra          |
 * +-------+--------------+------+-----+---------+----------------+
 * | id    | int(11)      | NO   | PRI | NULL    | auto_increment |
 * | name  | varchar(255) | NO   |     | NULL    |                |
 * +-------+--------------+------+-----+---------+----------------+
 * 2 rows in set (0.00 sec)
 *
 * mysql> DESCRIBE dorm_lounge_study_group;
 * +----------------+---------+------+-----+---------+-------+
 * | Field          | Type    | Null | Key | Default | Extra |
 * +----------------+---------+------+-----+---------+-------+
 * | dorm_lounge_id | int(11) | NO   | PRI | NULL    |       |
 * | study_group_id | int(11) | NO   | PRI | NULL    |       |
 * +----------------+---------+------+-----+---------+-------+
 * 2 rows in set (0.00 sec)
 *
 * mysql> DESCRIBE study_group_student;
 * +----------------+---------+------+-----+---------+-------+
 * | Field          | Type    | Null | Key | Default | Extra |
 * +----------------+---------+------+-----+---------+-------+
 * | study_group_id | int(11) | NO   | PRI | NULL    |       |
 * | student_id     | int(11) | NO   | PRI | NULL    |       |
 * +----------------+---------+------+-----+---------+-------+
 * 2 rows in set (0.00 sec)
 *
 * }</pre>
 */
@Entity
@SuppressWarnings({"WeakerAccess", "CanBeFinal", "unused"})
public class StudyGroup extends DemoModel {

    @ManyToMany(mappedBy = "studyGroups")
    public List<DormLounge> dormLounges;

    @ManyToMany
    public List<Student> students;

    public StudyGroup(@NotNull String name, @NotNull List<Student> students) {
        super(name);
        this.students = students;
        this.save();

        for (Student student : this.students) {
            student.refresh();
        }
    }

    @Override
    @NotNull
    public String getDescription() {
        return getDescriptionFromProperties(
                DemoModel.objectsToString(DormLounge.class, dormLounges),
                DemoModel.objectsToString(Student.class, students));
    }

}
