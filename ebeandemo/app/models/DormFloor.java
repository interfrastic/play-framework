package models;

import java.util.List;
import java.util.stream.Collectors;
import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.validation.constraints.NotNull;

/**
 * Demonstrate the following relationships in the Ebean ORM:
 * <pre>{@code
 * Each dorm has 1 - N dorm floors
 * Each dorm floor has exactly 1 dorm
 *
 * +---------------------------------+       +---------------------------------+
 * |                                 |       |                                 |
 * | Dorm                            |||---|<| DormFloor                       |
 * |                                 |       |                                 |
 * +---------------------------------+       +---------------------------------+
 *
 * @OneToMany(mappedBy = "dorm")             @ManyToOne
 *     optional = false)  // ERROR!          public Dorm dorm;
 * public List<DormFloor> dormFloors;
 * }</pre>
 * It is currently impossible to implement the relationship above in the Ebean
 * ORM because {@code @oneToMany} does not support {@code optional = false}.
 * <p>
 * This is the actual implementation, which technically allows a dorm with no
 * floors:
 * <pre>{@code
 * Each dorm has 0 - N dorm floors
 * Each dorm floor has exactly 1 dorm
 *
 * +---------------------------------+       +---------------------------------+
 * |                                 |       |                                 |
 * | Dorm                            |||---O<| DormFloor                       |
 * |                                 |       |                                 |
 * +---------------------------------+       +---------------------------------+
 *
 * @OneToMany(mappedBy = "dorm")             @ManyToOne
 * public List<DormFloor> dormFloors;        public Dorm dorm;
 * }</pre>
 * The absence of {@code mappedBy} marks this side of the <!--               -->
 * {@code @OneToMany}/{@code @ManyToOne} relationship as the owning side. The
 * other side of this relationship (the one without {@code mappedBy}) is the
 * inverse (non-owning) side.
 * <p>
 * In order to support this relationship, a column <em>is</em> added to the
 * database table that represents this Java class, as shown below; no column is
 * added to the table representing the other side of the relationship.
 * <pre>{@code
 * Each dorm floor has 0 - N dorm rooms
 * Each dorm room has exactly 1 dorm floor
 *
 * +---------------------------------+       +---------------------------------+
 * |                                 |       |                                 |
 * | DormFloor                       |||---O<| DormRoom                        |
 * |                                 |       |                                 |
 * +---------------------------------+       +---------------------------------+
 *
 * @OneToMany(mappedBy = "dormFloor")        @ManyToOne(optional = false)
 * public List<DormRoom> dormRooms;          public DormFloor dormFloor;
 * }</pre>
 * The presence of {@code mappedBy} marks this side of the <!--              -->
 * {@code @OneToMany}/{@code @ManyToOne} relationship as the inverse
 * (non-owning) side. The other side of this relationship (the one without
 * {@code mappedBy}) is the owning side.
 * <p>
 * In order to support this relationship, a column <em>is not</em> added to the
 * database table that represents this Java class, as shown below; instead, a
 * column is added to the table representing the other side of the relation.
 * <p>
 * Here is the MySQL database table generated by the Ebean ORM:
 * <pre>{@code
 * mysql> DESCRIBE dorm_floor;
 * +---------+--------------+------+-----+---------+----------------+
 * | Field   | Type         | Null | Key | Default | Extra          |
 * +---------+--------------+------+-----+---------+----------------+
 * | id      | int(11)      | NO   | PRI | NULL    | auto_increment |
 * | name    | varchar(255) | NO   |     | NULL    |                |
 * | dorm_id | int(11)      | NO   | MUL | NULL    |                |
 * +---------+--------------+------+-----+---------+----------------+
 * 3 rows in set (0.00 sec)
 *
 * }</pre>
 */
@Entity
@SuppressWarnings({"WeakerAccess", "CanBeFinal", "unused"})
public class DormFloor extends CollegeModel {

    @ManyToOne(optional = false)
    public Dorm dorm;

    @OneToMany(mappedBy = "dormFloor")
    public List<DormRoom> dormRooms;

    public DormFloor(String name, @NotNull Dorm dorm) {
        super(name);
        this.dorm = dorm;
        this.save();
        this.dorm.refresh();
    }

    public String getDescription() {
        StringBuilder sb = new StringBuilder(this.toString());

        sb.append(" has ").append(dorm).append(", ");

        if (dormRooms.isEmpty()) {
            sb.append("no ").append(DormRoom.class.getSimpleName())
                    .append(" objects");
        } else {
            sb.append(dormRooms.stream().map(Object::toString)
                    .collect(Collectors.joining(", ")));
        }

        return sb.toString();
    }

}
