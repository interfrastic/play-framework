package models;

import java.util.List;
import java.util.stream.Collectors;
import javax.persistence.Entity;
import javax.persistence.OneToMany;

/**
 * Demonstrate the following relationships in the Ebean ORM:
 * <pre>{@code
 * Each dorm room has 0 - N students
 * Each student has 0 - 1 dorm rooms (students may live off campus)
 *
 * +---------------------------------+       +---------------------------------+
 * | DormRoom                        |O|---O<| Student                         |
 * +---------------------------------+       +---------------------------------+
 *
 * @OneToMany(mappedBy = "dormRoom")         @ManyToOne
 * public List<Student> students;            public DormRoom dormRoom;
 * }</pre>
 * In order to support this relationship, a column <em>is not</em> added to the
 * database table that represents this Java class, as shown below.
 * <p>
 * Here is the MySQL database table generated by the Ebean ORM:
 * <pre>{@code
 * mysql> DESCRIBE dorm_room;
 * +-------+--------------+------+-----+---------+----------------+
 * | Field | Type         | Null | Key | Default | Extra          |
 * +-------+--------------+------+-----+---------+----------------+
 * | id    | int(11)      | NO   | PRI | NULL    | auto_increment |
 * | name  | varchar(255) | YES  |     | NULL    |                |
 * +-------+--------------+------+-----+---------+----------------+
 * 2 rows in set (0.00 sec)
 *
 * }</pre>
 */
@Entity
@SuppressWarnings("WeakerAccess")
public class DormRoom extends CollegeModel {

    @OneToMany(mappedBy = "dormRoom") // Default: optional = true
    @SuppressWarnings("unused")
    public List<Student> students;

    public DormRoom(String name) {
        super(name);
        this.save();
    }

    public String getDescription() {
        StringBuilder sb = new StringBuilder(this.toString());

        sb.append(" has ");

        if (students.size() > 0) {
            sb.append(students.stream().map(Object::toString)
                    .collect(Collectors.joining(", ")));
        } else {
            sb.append("no ").append(Student.class.getSimpleName())
                    .append(" objects");
        }

        return sb.toString();
    }

}
