package models;

import java.util.List;
import javax.persistence.Entity;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.validation.constraints.NotNull;

/**
 * Demonstrate the following relationships in the Ebean ORM:
 * <pre>{@code
 * 0 - 1 TO 0 - N RELATIONSHIP
 *
 * Each dorm room has 0 - N students (a room might not be assigned)
 * Each student has 0 - 1 dorm rooms (a student might live off campus)
 *
 * +---------------------------------+       +---------------------------------+
 * |                                 |       |                                 |
 * | DormRoom                        |O|---O<| Student                         |
 * |                                 |       |                                 |
 * +---------------------------------+       +---------------------------------+
 *
 * @OneToMany(mappedBy = "dormRoom")         @ManyToOne
 * public List<Student> students;            public DormRoom dormRoom;
 * }</pre>
 * The absence of {@code mappedBy} marks this side of the <!--               -->
 * {@code @OneToMany}/{@code @ManyToOne} relationship as the owning side. The
 * other side of this relationship (the one with {@code mappedBy}) is the
 * inverse (non-owning) side.
 * <p>
 * In order to support this relationship, a column <em>is</em> added to the
 * database table that represents this Java class, as shown below; no column is
 * added to the table representing the other side of the relationship.
 * <pre>{@code
 * 0 - N TO 0 - M RELATIONSHIP
 *
 * Each study group has 0 - N students
 * Each student has 0 - M study groups
 *
 * +---------------------------------+       +---------------------------------+
 * |                                 |       |                                 |
 * | StudyGroup                      |>O---O<| Student                         |
 * |                                 |       |                                 |
 * +---------------------------------+       +---------------------------------+
 * @ManyToMany                               @ManyToMany(mappedBy = "students")
 * public List<Student> students;            public List<StudyGroup>
 *                                                   studyGroups;
 * }</pre>
 * The absence of {@code mappedBy} marks this side of the <!--               -->
 * {@code @ManyToMany}/{@code @ManyToMany} relationship as the owning side. The
 * other side of this relationship (the one with {@code mappedBy}) is the
 * inverse (non-owning) side.
 * <p>
 * In order to support this relationship, no columns are added to the two
 * database tables that represent its Java classes; instead, an auxiliary join
 * table named {@code study_group_student} is added to the database, as shown
 * below.
 * <p>
 * Here are the MySQL database table and the auxiliary join tables generated by
 * the Ebean ORM; the first column in each join table belongs to the owning side
 * of the relationship and the second column belongs to the inverse (non-owning)
 * side:
 * <pre>{@code
 * mysql> DESCRIBE student;
 * +--------------+--------------+------+-----+---------+----------------+
 * | Field        | Type         | Null | Key | Default | Extra          |
 * +--------------+--------------+------+-----+---------+----------------+
 * | id           | int(11)      | NO   | PRI | NULL    | auto_increment |
 * | name         | varchar(255) | NO   |     | NULL    |                |
 * | dorm_room_id | int(11)      | YES  | MUL | NULL    |                |
 * +--------------+--------------+------+-----+---------+----------------+
 * 3 rows in set (0.00 sec)
 *
 * mysql> DESCRIBE study_group_student;
 * +----------------+---------+------+-----+---------+-------+
 * | Field          | Type    | Null | Key | Default | Extra |
 * +----------------+---------+------+-----+---------+-------+
 * | study_group_id | int(11) | NO   | PRI | NULL    |       |
 * | student_id     | int(11) | NO   | PRI | NULL    |       |
 * +----------------+---------+------+-----+---------+-------+
 * 2 rows in set (0.00 sec)
 *
 * }</pre>
 */
@Entity
@SuppressWarnings({"WeakerAccess", "CanBeFinal", "unused"})
public class Student extends DemoModel {

    @ManyToOne // Default: optional = true.
    public DormRoom dormRoom;

    @ManyToMany(mappedBy = "students")
    public List<StudyGroup> studyGroups;

    public Student(@NotNull String name) {
        super(name);
        this.save();
    }

    public Student(@NotNull String name, @NotNull DormRoom dormRoom) {
        super(name);
        this.dormRoom = dormRoom;
        this.save();
        this.dormRoom.refresh();
    }

    @Override
    @NotNull
    public String getDescription() {
        return getDescriptionFromProperties(
                DemoModel.objectToString(DormRoom.class, dormRoom),
                DemoModel.objectsToString(StudyGroup.class, studyGroups));
    }

}
