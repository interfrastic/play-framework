package models;

import javax.persistence.Entity;
import javax.persistence.OneToOne;

/**
 * Demonstrate the following relationships in the Ebean ORM:
 * <pre>{@code
 * Each parking space has 0 - 1 students
 * Each student has 0 - 1 parking spaces (limit 1 space per student)
 *
 * +---------------------------------+       +---------------------------------+
 * | ParkingSpace                    |O|---|O| Student                         |
 * +---------------------------------+       +---------------------------------+
 *
 * @OneToOne(mappedBy                        @OneToOne
 *         = "parkingSpace")                 public ParkingSpace parkingSpace;
 * public Student student;
 * }</pre>
 * The presence of {@code mappedBy} marks this side of the <!--              -->
 * {@code @OneToOne}/{@code @OneToOne} relationship as the inverse (non-owning)
 * side; it is analogous to {@code @OneToMany}, the "many" side of a <!--    -->
 * {@code @OneToMany}/{@code @ManyToOne} relationship, only with its cardinality
 * limited to one. The other side of this relationship (the one without {@code
 * mappedBy}) is the owning side.
 * <p>
 * In order to support this relationship, a column <em>is not</em> added to the
 * database table that represents this Java class, as shown below; instead, a
 * column is added to the table representing the other side of the relationship.
 * <p>
 * Here is the MySQL database table generated by the Ebean ORM:
 * <pre>{@code
 * mysql> DESCRIBE parking_space;
 * +-------+--------------+------+-----+---------+----------------+
 * | Field | Type         | Null | Key | Default | Extra          |
 * +-------+--------------+------+-----+---------+----------------+
 * | id    | int(11)      | NO   | PRI | NULL    | auto_increment |
 * | name  | varchar(255) | YES  |     | NULL    |                |
 * +-------+--------------+------+-----+---------+----------------+
 * 2 rows in set (0.00 sec)
 *
 * }</pre>
 */
@Entity
@SuppressWarnings("WeakerAccess")
public class ParkingSpace extends CollegeModel {

    @OneToOne(mappedBy = "parkingSpace") // Default: optional = true.
    @SuppressWarnings("unused")
    public Student student;

    public ParkingSpace(String name) {
        super(name);
        this.save();
    }

    public String getDescription() {
        StringBuilder sb = new StringBuilder(this.toString());

        sb.append(" has ");

        if (student == null) {
            sb.append("no ").append(Student.class.getSimpleName())
                    .append(" object");
        } else {
            sb.append(student);
        }

        return sb.toString();
    }

}
