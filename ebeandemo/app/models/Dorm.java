package models;

import java.util.Collections;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.OneToMany;
import javax.validation.constraints.NotNull;

/**
 * Demonstrate the following relationships in the Ebean ORM:
 * <pre>{@code
 * 1 TO 0 - N RELATIONSHIP
 *
 * Each dorm has 0 - N dorm floors (see note below)
 * Each dorm floor has exactly 1 dorm
 *
 * +---------------------------------+       +---------------------------------+
 * |                                 |       |                                 |
 * | Dorm                            |||---O<| DormFloor                       |
 * |                                 |       |                                 |
 * +---------------------------------+       +---------------------------------+
 *
 * @OneToMany(mappedBy = "dorm")             @ManyToOne(optional = false)
 * public List<DormFloor> dormFloors;        public Dorm dorm;
 * }</pre>
 * <strong>Note:</strong> It seems more logical to say that each dorm has 1 - N
 * dorm floors, but the Ebean ORM does not support this type of relationship;
 * see the file {@code README.md} in the root directory of this project for
 * further discussion of the standard relationships that cannot be modeled.
 * <p>
 * The presence of {@code mappedBy} marks this side of the <!--              -->
 * {@code @OneToMany}/{@code @ManyToOne} relationship as the inverse
 * (non-owning) side. The other side of this relationship (the one without
 * {@code mappedBy}) is the owning side.
 * <p>
 * In order to support this relationship, a column <em>is not</em> added to the
 * database table that represents this Java class, as shown below; instead, a
 * column is added to the table representing the other side of the relation.
 * <p>
 * Here is the MySQL database table generated by the Ebean ORM:
 * <pre>{@code
 * mysql> DESCRIBE dorm;
 * +-------+--------------+------+-----+---------+----------------+
 * | Field | Type         | Null | Key | Default | Extra          |
 * +-------+--------------+------+-----+---------+----------------+
 * | id    | int(11)      | NO   | PRI | NULL    | auto_increment |
 * | name  | varchar(255) | YES  |     | NULL    |                |
 * +-------+--------------+------+-----+---------+----------------+
 * 2 rows in set (0.00 sec)
 *
 * }</pre>
 */
@Entity
@SuppressWarnings({"WeakerAccess", "CanBeFinal", "unused"})
public class Dorm extends DemoModel {

    @OneToMany(mappedBy = "dorm")
    public List<DormFloor> dormFloors;

    public Dorm(@NotNull String name) {
        super(name);
        this.save();
    }

    @Override
    @NotNull
    public String getObjectDescription() {
        return getObjectDescriptionFromStrings(Collections.singletonList(
                DemoModel.objectsToString(DormFloor.class, dormFloors)));
    }

}
